
variables:
  GOLANG_IMAGE: golang:1.20
  DOCKER_IMAGE: docker:24
  HELM_IMAGE: alpine/helm:3.12.1
  HELM_KUBECTL_IMAGE: dtzar/helm-kubectl:3.12.1
  HELM_CHARTMUSEUM_VERSION: v0.10.4

  # ----------
  # These should be set via GitLab Pipeline variables
  KUBERNETES_SERVER:
    description: "Remote k8s server address"
  KUBERNETES_CERTIFICATE_AUTHORITY_DATA:
    description: "K8s certificate authority data"
  KUBERNETES_USER_NAME:
    description: "K8s user name"
  KUBERNETES_USER_TOKEN:
    description: "K8s user token"
  APPLICATION_DOMAIN:
    description: "Domain where the application is deployed"
  APPLICATION_KUBERNETES_NAMESPACE:
    description: "Kubernetes namespace that the application should be deployed to"

stages:
  - compile
  - build
  - test
  - bundle
  - publish
  - deploy

compile-swagger-docs:
  stage: compile
  image: $GOLANG_IMAGE
  script:
    - make swagger
  artifacts:
    paths:
    - api/swagger.json
    - api/swagger.yaml

build-gogin:
  stage: build
  image: $GOLANG_IMAGE
  script:
    - make build
  artifacts:
    paths:
    - build/gogin

test-unit-tests:
  stage: test
  image: $GOLANG_IMAGE
  script:
    - make test

test-race-detector:
  stage: test
  image: $GOLANG_IMAGE
  script:
    - make race

test-coverage-report:
  stage: test
  image: $GOLANG_IMAGE
  script:
    - make coverhtml
  artifacts:
    paths:
      - 'coverage/*'
  coverage: '/^total:.*statements.*?(\d+\.\d+%)$/'
  only:
    - main

bundle-docker:
  stage: bundle
  image: $DOCKER_IMAGE
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker pull $CI_REGISTRY_IMAGE:latest || true
    - >
      docker build
      --pull
      --cache-from $CI_REGISTRY_IMAGE:latest
      --label "org.opencontainers.image.title=$CI_PROJECT_TITLE"
      --label "org.opencontainers.image.url=$CI_PROJECT_URL"
      --label "org.opencontainers.image.created=$CI_JOB_STARTED_AT"
      --label "org.opencontainers.image.revision=$CI_COMMIT_SHA"
      --label "org.opencontainers.image.version=$CI_COMMIT_REF_NAME"
      --tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
      .
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA

bundle-helm:
  stage: bundle
  image: 
    name: $HELM_IMAGE
    entrypoint: [""]
  script:
    - helm package ./helm
  artifacts:
    paths:
    - "*.tgz"

publish-helm:
  stage: publish
  image: 
    name: $HELM_IMAGE
    entrypoint: [""]
  dependencies:
    - bundle-helm
  before_script:
    - apk add git
    - >
      helm repo add 
      --username ${CI_REGISTRY_USER}
      --password ${CI_REGISTRY_PASSWORD}
      ${CI_PROJECT_NAME} 
      ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/helm/stable
    - helm plugin install --version=${HELM_CHARTMUSEUM_VERSION} https://github.com/chartmuseum/helm-push.git
  script:
    - helm cm-push ${CI_PROJECT_NAME}*.tgz ${CI_PROJECT_NAME}
  only:
    refs:
      - main
    changes:
      - helm/**/*

publish-docker-latest:
  stage: publish
  image: $DOCKER_IMAGE
  dependencies:
    - bundle-docker
  variables:
    GIT_STRATEGY: none
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE:latest
    - docker push $CI_REGISTRY_IMAGE:latest
  only:
    - main

publish-docker-tag:
  stage: publish
  image: $DOCKER_IMAGE
  dependencies:
    - bundle-docker
  variables:
    GIT_STRATEGY: none
  rules:
    - if: '$CI_COMMIT_REF_NAME =~ "/^v((?P<major>0|[1-9]\d*)(\.(?P<minor>0|[1-9]\d*)(\.(?P<patch>0|[1-9]\d*))?)?)$/"'
      when: always
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE:${CI_COMMIT_REF_NAME:1}
    - docker push $CI_REGISTRY_IMAGE:${CI_COMMIT_REF_NAME:1}

pages:
  stage: publish
  image: $GOLANG_IMAGE
  dependencies:
    - test-coverage-report
  script:
    - ls coverage/
    - mv coverage/ public/
    - 'if [ -f public/coverage.html ]; then mv public/coverage.html public/index.html; fi'
  artifacts:
    name: public
    paths:
      - public
  only:
    - main

deploy-staging:
  stage: deploy
  image: $HELM_KUBECTL_IMAGE
  dependencies:
    - publish-docker-tag
  rules:
    - if: '$CI_COMMIT_REF_NAME =~ "/^v((?P<major>0|[1-9]\d*)(\.(?P<minor>0|[1-9]\d*)(\.(?P<patch>0|[1-9]\d*))?)?)$/"'
      when: always
  script:
    # --------
    # Kubeconfig for the remote k8s cluster
    - kubectl config set-cluster k8s --server="${KUBERNETES_SERVER}"
    - kubectl config set clusters.k8s.certificate-authority-data ${KUBERNETES_CERTIFICATE_AUTHORITY_DATA}
    - kubectl config set-credentials ${KUBERNETES_USER_NAME} --token="${KUBERNETES_USER_TOKEN}"
    - kubectl config set-context default --cluster=k8s --user=${KUBERNETES_USER_NAME}
    - kubectl config use-context default

    # --------
    # Create Docker Auth configuration
    - >
      export DOCKER_CONFIG_AUTH=$(echo -n "${CI_REGISTRY_USER}:${CI_REGISTRY_PASSWORD}" | base64 -w 0)
    - >
      export DOCKER_CONFIG_RAW=$(echo -n "{\"auths\": { \"${CI_REGISTRY}\": { \"auth\": \"${DOCKER_CONFIG_AUTH}\" } } }" )
    - >
      export DOCKER_CONFIG=$(echo -n ${DOCKER_CONFIG_RAW} | base64 -w 0)

    # --------
    # GitLab Helm repository
    - >
      helm repo add 
      --username ${CI_REGISTRY_USER}
      --password ${CI_REGISTRY_PASSWORD}
      ${CI_PROJECT_NAME} 
      ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/helm/stable

    # --------
    # Deploy to Kubernetes
    - >
      helm upgrade
      --install ${CI_PROJECT_NAME}
      ${CI_PROJECT_NAME}/${CI_PROJECT_NAME}
      --namespace=${APPLICATION_KUBERNETES_NAMESPACE}
      --create-namespace
      --set="image.registry.dockerConfig=${DOCKER_CONFIG}"
      --set="ingress.host.goginDomain=${APPLICATION_DOMAIN}"